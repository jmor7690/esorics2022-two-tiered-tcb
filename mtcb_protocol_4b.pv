(******************************************************
  Protocols for a Two-Tiered Trusted Computing Base

  - Protocol 4: ETCB Recovery (Part II: Memory corruption detection + E-TCB recovery)
 
 ******************************************************)
 
set preciseActions = false.

(* ===================
   Equational theories 
   =================== *)
   
(* Hashing *)
fun h(bitstring): bitstring.

(* Symmetric encryption *)
type skey.
fun senc(bitstring, skey): bitstring.
fun sdec(bitstring, skey): bitstring.
equation forall m:bitstring, k:skey; sdec(senc(m,k),k)=m.
equation forall m:bitstring, k:skey; senc(sdec(m,k),k)=m.

(* MAC *)
type mkey.
fun mac(bitstring, mkey): bitstring.
reduc forall m:bitstring, k:mkey; getmess_mac(mac(m,k))=m.

(* KDF *)
fun kdf_mac(bitstring): mkey.

(* Signatures *)
type sskey.
type spkey.
fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m:bitstring, k:sskey; getmess(sign(m,k))=m.
reduc forall m:bitstring, k:sskey; checksign(sign(m,k),spk(k))=m.



(* ============================ 
   Types, free names and tables
   ============================ *)

type boot_instance.

type os_action.
free OS_LEGITIMATE:os_action.

type etcb_action.
free ETCB_LEGITIMATE:etcb_action.

type flag.
free SAFE_MODE_ON:flag.

type id.

(* Stores boot instance configurations, with OS, E-TCB and E-TCB version feed from adversary-controlled store *)
table instances_table(boot_instance, os_action, etcb_action, nat).

(* Stores boot instance configurations, after E-TCB recovery (i.e., new configuration on reboot) *)
table instances_table_new(boot_instance, os_action, etcb_action, nat).
table flags_table(boot_instance, flag).                 (* Stores signaling flags *)



(* ==================
   Events and queries 
   ================== *)

event VendorCreatesEtcb(etcb_action, nat).

event MtcbDetectsCorruption(boot_instance, os_action, etcb_action, nat).
event MtcbEndProtocol4(boot_instance, os_action, etcb_action, nat).

event OsLoaded(boot_instance, os_action).
event OsStarts(boot_instance, os_action).
event OsAttackEvent(boot_instance).

event EtcbLoaded(boot_instance, etcb_action).
event EtcbStarts(boot_instance, etcb_action, nat).
event EtcbAttackEvent(boot_instance).

event PlatformBoots(boot_instance).
event MtcbForcesReboot(boot_instance).

event AttackEvent(boot_instance).
event AttackEventMemoryCorruption(boot_instance, os_action, etcb_action, nat).

free c:channel.

(* Queries for Protocol 4 - E-TCB Recovery (Part II: Memory corruption detection + E-TCB recovery) *)
query instance:boot_instance, oa:os_action, ea:etcb_action, ev:nat, oa':os_action, ea':etcb_action, ev':nat;
    event(AttackEventMemoryCorruption(instance, oa, ea, ev)) && event(MtcbEndProtocol4(instance, oa', ea', ev')) && event(MtcbForcesReboot(instance)).

query instance:boot_instance, oa:os_action, ea:etcb_action, ev:nat, oa':os_action, ea':etcb_action, ev':nat;
    event(MtcbDetectsCorruption(instance, oa, ea, ev)) && event(MtcbEndProtocol4(instance, oa', ea', ev')).
    
query instance:boot_instance, oa:os_action, ea:etcb_action, ev:nat, oa':os_action, ea':etcb_action, ev':nat;
    event(MtcbDetectsCorruption(instance, oa, ea, ev)) && event(MtcbEndProtocol4(instance, oa', ea', ev')) ==> ev' > ev.    



(* =====================
   Processes definitions 
   ===================== *)

(*** E-TCB PROCESS ***)
let ETCB(instance:boot_instance) =
    get instances_table(=instance, xOsAction, xEtcbAction, xEtcbVer) in
    event EtcbStarts(instance, xEtcbAction, xEtcbVer).




(*** M-TCB PROCESS ***)

(* M-TCB Protocol 4 - ETCB Recovery *)
let MTCB_Protocol4(instance:boot_instance, spk_root:spkey, hEtcb_ref:bitstring) =
    get instances_table(=instance, xOsAction, xEtcbAction, xEtcbVer) in
    let etcb_measurement = h((xEtcbAction,xEtcbVer)) in
    if etcb_measurement <> hEtcb_ref then
        event MtcbDetectsCorruption(instance, xOsAction, xEtcbAction, xEtcbVer);
        
        (* Reboot to a safe state that blocks connections *)
        insert flags_table(instance, SAFE_MODE_ON);
        event MtcbForcesReboot(instance);                        (* M-TCB detects the attack and forces reboot *)
        
        (* E-TCB recovery functionality of Protocol 4 *)
        in(c, xEtcbBlobNew:bitstring);
        let (xEtcbActionNew:etcb_action, xEtcbVerNew:nat) = getmess(xEtcbBlobNew) in
        if checksign(xEtcbBlobNew,spk_root) = (xEtcbActionNew, xEtcbVerNew) then
        if xEtcbVerNew > xEtcbVer then
        let hEtcb_refNew = h((xEtcbActionNew, xEtcbVerNew)) in
        
        (* Secure reboot to new ETCB *)
        in(c, (xOsAction':os_action, xEtcbBlob':bitstring));
        let (xEtcbAction':etcb_action, xEtcbVer':nat) = getmess(xEtcbBlob') in
        let etcb_measurement' = h((xEtcbAction', xEtcbVer')) in
        if etcb_measurement' = hEtcb_refNew then
        insert instances_table_new(instance, xOsAction', xEtcbAction', xEtcbVer');
        event MtcbEndProtocol4(instance, xOsAction', xEtcbAction', xEtcbVer').
 

(* M-TCB *)
let MTCB(instance:boot_instance, id_mtcb:id, spk_root:spkey, hEtcb_ref:bitstring) = 
    !MTCB_Protocol4(instance, spk_root, hEtcb_ref).




(*** CPU PROCESS ***)

(* CPU *)
let CPU(instance:boot_instance) =
    ETCB(instance).




(*** VENDOR PROCESS ***)

let Vendor(ssk_root:sskey) =
    (* Vendor Protocol 4 - ETCB Recovery *)
    new etcb0:etcb_action;
    event VendorCreatesEtcb(etcb0, 0);
    out(c, sign((etcb0, 0),ssk_root));
    
    new etcb1:etcb_action;
    event VendorCreatesEtcb(etcb1, 1);    
    out(c, sign((etcb1, 1),ssk_root));
    
    new etcb2:etcb_action;
    event VendorCreatesEtcb(etcb2, 2);    
    out(c, sign((etcb2, 2),ssk_root));
    
    new etcb3:etcb_action;
    event VendorCreatesEtcb(etcb3, 3);    
    out(c, sign((etcb3, 3),ssk_root));
    
    new etcb4:etcb_action;
    event VendorCreatesEtcb(etcb4, 4);    
    out(c, sign((etcb4, 4),ssk_root));
    
    new etcb5:etcb_action;
    event VendorCreatesEtcb(etcb5, 5);    
    out(c, sign((etcb5, 5),ssk_root)).




(*** MEMORY CORRUPTION PROCESS ***)

(* This process models E-TCB memory corruption capabilities of the adversary *)
let MemoryCorruptionAttack(instance:boot_instance, xOsAction:os_action, xEtcbAction:etcb_action, xEtcbVer:nat) =
    if xEtcbVer < 2 then                                (* We assume E-TCBs with version < 2 are vulnerable to memory corruption *)
    in(c, (=xOsAction, xEtcbAction':etcb_action));      (* To help termination, we assume the adversary only changes E-TCB *)
    if xEtcbAction' <> xEtcbAction then
        event AttackEventMemoryCorruption(instance, xOsAction, xEtcbAction', xEtcbVer);
        insert instances_table(instance, xOsAction, xEtcbAction', xEtcbVer).
        (* At this point, instances_table might contain a legitimate and malicious E-TCBs.
           Since we assume the adversary might freely change the memory contents, the M-TCB
           will read the memory in one of these states, but ProVerif does not 
           whow which one will be retrieved (although it will reason for all the possible states).
           In a real scenario, probabilistically, the M-TCB will eventually identify the memory
           corruption attack, if it chooses an approppriate frequency of memory reads. *)



(*** MAIN PROCESS ***)

process
    new ssk_root:sskey;
    let spk_root = spk(ssk_root) in
    out(c, spk_root);
    
    (* We create an arbitrary number of platforms *)
    !(
        new id_mtcb:id;
        out(c, id_mtcb);
        new ssk_mtcb:sskey;
        let mtcb_spk = spk(ssk_mtcb) in
        out(c, mtcb_spk);

        (* For each platform, we allow an arbitrary number of boots *)
        !(
            (* Input OS and ETCB from adversary-controlled store *)
            in(c, (xOsAction:os_action, xEtcbBlob:bitstring));
            
            let (xEtcbAction:etcb_action, xEtcbVer:nat) = getmess(xEtcbBlob) in
            if checksign(xEtcbBlob,spk_root) = (xEtcbAction, xEtcbVer) then
            
            new instance:boot_instance;
            insert instances_table(instance, xOsAction, xEtcbAction, xEtcbVer);
            
            event PlatformBoots(instance);
            event OsLoaded(instance, xOsAction);
            event EtcbLoaded(instance, xEtcbAction);

            let hEtcb_ref = h((xEtcbAction, xEtcbVer)) in  (* Reference measurement for E-TCB (initial) *)
            (
                CPU(instance)
                | MTCB(instance, id_mtcb, spk_root, hEtcb_ref)
                | ! MemoryCorruptionAttack(instance, xOsAction, xEtcbAction, xEtcbVer)
            )
        )
    ) | Vendor(ssk_root)
